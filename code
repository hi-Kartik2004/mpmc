
1.Binary search
.MODEL SMALL
.STACK
.DATA
M1 DB 'SEARCH FAILS $'
M2 DB 'SEARCH IS SUCCESSFUL$'
N0 DW 8
A DW 1,2,3,4,5,6,7,8
KEY DW 6
.CODE
MOV AX,@DATA
MOV DS, AX
MOV SI,0
MOV DI,N0
ADD DI,DI
SUB DI,2
BACK:
CMP SI,DI
JA LOC3
MOV BX,SI
ADD BX,DI
SHR BX,1
AND BX,0FFFEH
MOV AX,A[BX]
CMP AX,KEY
JE LOC1
JB LOC2
MOV DI,BX
SUB DI,2
JMP BACK
LOC2: MOV SI,BX
ADD SI,2
JMP BACK
LOC3: LEA DX,M1
JMP AHED
LOC1: LEA DX,M2
AHED: MOV AH,9
INT 21H
MOV AH,4CH
INT 21H
END


2.Bubble sort
.MODEL SMALL
.STACK
.DATA
A DB 0077H,0042H,0035H,0012H,00FFH,0005H
L DW $-A

.CODE
MOV AX,@DATA
MOV DS,AX
MOV BX,L
DEC BX
NXTPASS:MOV CX,BX
MOV SI,0
NXTCOMP:
MOV AL,A[SI]
INC SI,2
CMP AL,A[SI]
JB NO_EXG
XCHG AL,A[SI]
MOV A[SI-2],AL
NO_EXG: LOOP NXTCOMP
DEC BX
JNZ NXTPASS
MOV AH,4CH
INT 21H

END


3.palindrome
.MODEL SMALL
.STACK
.DATA
  STR DB "MADAM"
  L DW $-STR
  RSTR DB 10 DUP(?)
  MSG1 DB "It is palindrome$"
  MSG2 DB "It is not palindrome$"
.CODE
  MOV AX,@DATA
  MOV DS,AX
  MOV ES,AX
  MOV CX,L
  LEA SI,STR
  LEA DI,RSTR
  ADD DI,CX
  DEC DI
BACK:MOV AL,[SI]
     MOV [DI],AL
     INC SI
     DEC DI
     LOOP BACK

     LEA SI,STR
     LEA DI,RSTR
     MOV CX,L
     CLD
     REPE CMPSB
     JNE NOTPAL
     LEA DX,MSG1
     JMP DISP
NOTPAL:LEA DX,MSG2
DISP: MOV AH,09H
      INT 21H
      MOV AH,4CH
      INT 21H
      END     


              




4.ncr
.MODEL SMALL
.STACK
.DATA
  N DW 6
  R DW 2
  NCR DW 0
.CODE
  MOV AX,@DATA
  MOV DS,AX
  MOV AX,N
  MOV BX,R
  CALL NCR_PROC
  MOV AH,4CH
  INT 21H
ncr_proc proc
  CMP AX,BX
  JZ N1
  CMP BX,0
  JZ N1
  CMP BX,1
  JZ N2
  MOV CX,AX
  DEC CX
  CMP CX,BX
  JZ N2
  PUSH AX
  PUSH BX
  DEC AX
  CALL ncr_proc
  POP BX
  POP AX
  DEC AX
  DEC BX
  CALL ncr_proc
  JMP LAST
N1:ADD ncr,1
   RET
N2:ADD ncr,AX
LAST: RET
ncr_proc ENDp
END


5.time and date
.MODEL SMALL
.DATA
  MSG1 DB "TIME IS$"
  MSG2 DB 10,13,"DATE IS$"

.CODE
  MOV AX,@DATA
  MOV DS,AX
  LEA DX,MSG1
  MOV AH,09H
  INT 21H
  MOV AH,2CH
  INT 21H
  MOV AL,CH
  CALL DISPLAY
  MOV AL,CL
  CALL DISPLAY
  MOV AL,DH
  CALL DISPLAY
  LEA DX,MSG2
  MOV AH,09H
  INT 21H
  MOV AH,2AH
  INT 21H
  MOV BX,DX
  CALL DISPLAY
  MOV AL,BL
  CALL DISPLAY
  MOV AL,BH
  CALL DISPLAY
  MOV DL,':'
  MOV AH,02H
  INT 21H
  MOV AX,CX
  MOV DX,0
  MOV BX,10
  DIV BX
  MOV CL,DL
  MOV DX,0
  DIV BX
  ADD DL,30H
  MOV AH,02H
  INT 21H
  MOV DL,CL
  ADD DL,30H
  MOV AH,02H
  INT 21H
  MOV AH,4CH
  INT 21H

  DISPLAY PROC
  PUSH AX
  MOV DL,':'
  MOV AH,02H
  INT 21H
  POP AX
  AAM
  MOV DX,AX
  ADD DX,3030H
  XCHG DH,DL
  MOV AH,02H
  INT 21H

  MOV DL,DH
  MOV AH,02H
  INT 21H
  RET
  DISPLAY ENDP
  END



6.
	AREA PRG6,CODE,READONLY 

ENTRY 

 	LDR R0,=5 
 	LDR R1,=3 

 	ADD R2,R0,R1 
 	SUB R3,R0,R1 
 	MUL R4,R0,R1 

 	AND R5,R0,R1
 	ORR R6,R0,R1 
 	EOR R7,R0,R1 

 	END

7.
#include <lpc214x.h> 

int main()
{
 int a,b,c,d,e,f;
 a=5;
 b=3;
 c=a+b;
 d=a-b;
 e=a*b;
 f=a/b;
 return 0;
} 



10.Mpmc 10th prog  fire and help
.MODEL SMALL
.DATA
PB EQU 0D801H
PC EQU 0D802H
CR EQU 0D803H
FIRE DB 86H,88H,0F9H,8EH
HELP DB 8CH,0C7H,86H,89H
.code
MOV AX, @DATA                			 
MOV DS, AX                                                   
MOV AL, 80H                                               
MOV DX, CR                                                  
OUT DX, AL                                                     
MOV CX, 10                                                
RPT: PUSH CX
LEA SI, FIRE                                               
CALL DISPLAY                                         
CALL DELAY
LEA SI, HELP                                         
CALL DISPLAY 				
CALL DELAY
POP CX
LOOP RPT
MOV AH, 4CH
INT 21h 				
DELAY PROC
PUSH CX
PUSH BX
MOV CX, 1000H
LOOP2:MOV BX, 0FFFFH
LOOP1:DEC BX
JNZ LOOP1				 
LOOP LOOP2					 
POP BX
POP CX
RET
DELAY ENDP
DISPLAY PROC
MOV BL, 4					 
BACK2:MOV CL, 8 					
MOV AL, [SI]
BACK1:ROL AL, 1
MOV DX, PB ;
OUT DX, AL				 
PUSH AX
MOV AL, 1			 
MOV DX, PC ;
OUT DX, AL ;
DEC AL ;
OUT DX, AL ;
POP AX
DEC CL
JNZ BACK1 					
INC SI
DEC BL
JNZ BACK2					 
RET
DISPLAY ENDP
END


11.Mpmc 11 th prog stepper motor

.model small
.data
.code
pa equ 0c800h
pb equ 0c801h
pc equ 0c802h
cr equ 0c803h
count db 10
mov ax,@data
mov ds,ax
mov dx,cr
mov al,80h
out dx,al
mov bh,count
mov al,88h			 
up:mov dx,pc
out dx,al
call delay
ror al,1 				
jnz up
mov bh,count
mov dx,pc
mov al,88h
back: out dx,al
call delay
rol al,1					 
dec bh
jnz back
mov ah,4ch
int 21h
delay proc
push cx
push dx
mov cx,8000h
outloop:mov dx,4000h
inloop: dec dx
jnz inloop
loop outloop
pop dx
pop cx 
ret
delay endp
end







14. 
#include<stdio.h>
#include<LPC214x.h>

void delay(){
unsigned int i,j;
for(i=0;i<0xFF;i++){
for(j=0;j<0xFF;j++);
}
}


int main(){
unsigned int number=0x00;

IO0DIR=0x0000007C;

IO0SET=0x0000007C;

while(1){

IO0CLR=0x0000003C;
IO0SET=IO0SET|(number<<2); 
delay();
delay();

while(IO0PIN & 0x000080000);
while(!(IO0PIN & 0x000080000));
number++;
if(number>9)
{
number=0x00;
}
}

return 0;
}

















15.

#include<LPC214x.h>

unsigned int COUNT=0;

unsigned int j=0;

unsigned int CLOCK[4]={0x00030000, 0x00090000, 0x000C0000, 0x00060000};

unsigned int ANTI_CLOCK[4]={0x00060000, 0x000C0000, 0x00090000,0x00030000};

void DELAY_IS(unsigned int n){
unsigned int i,j;
for(i=1;i<=n;i++)
for(j=0;j<=10000;j++);
}

void CLOCK_WISE_DIRECTION(unsigned int STEP, unsigned int TIME){
for(j=0;j<=STEP;j++){
IO0PIN = CLOCK[COUNT];
COUNT++;
DELAY_IS(TIME);
if(COUNT==4)
COUNT=0;
}
}

void ANTI_CLOCK_WISE_DIRECTION(unsigned int STEP, unsigned int TIME){
for(j=0;j<=STEP;j++){
IO0PIN = ANTI_CLOCK[COUNT];
COUNT++;
DELAY_IS(TIME); 
if(COUNT==4)
COUNT=0;
}
}


int main(){
IO0PIN=0X000F0000;
while(1){
CLOCK_WISE_DIRECTION(10,500);
ANTI_CLOCK_WISE_DIRECTION(10,500);
}
}




